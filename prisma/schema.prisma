// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"

}

model User{
  id  String  @id @default(uuid())
  name String? 
  email String? @unique
  emailVerified String?
  image String?
  hashedPassword String?
  profile Profile?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt 
}

model Profile{
  id String @id @default(uuid())
  refresh_token      String?  
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?
  productReviews     ProductReview[]
  serviceReviews     ServiceReview[]
  order              Order[]
  user User @relation(fields: [userId], references: [id])
  userId String @unique

}

model Reservation{
  id String     @id @default(uuid())
  userId String 
  isPromotion  Boolean?   
  isService    Boolean?   

}

model Promotion{
  id              String           @id  @default(uuid())
  description     String?          @db.VarChar(1000)
  promotionImage  PromotionImage[]
  price           Float?
}

model PromotionImage {
    id          String       @id @default(uuid())
    promotionId String? //foreign key
    promotion   Promotion?   @relation(fields: [promotionId], references: [id])
    imageUrl    String?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt

    @@index([promotionId])
}

model Product {
    id                String      @id @default(uuid())
    blendName         String?
    barcode           String
    price             Float
    quantity          Int
    description   String?         @db.VarChar(1000)
    orderItems        OrderItem[] //relation to order model
    productImages     ProductImage[]
    available         Boolean     @default(true)
    featured          Boolean     @default(false)
    dateOfManufacture DateTime?
    dateOfExpiry      DateTime?
    createdAt         DateTime    @default(now())
    updatedAt         DateTime    @updatedAt

}

model Service{
  id            String          @id @default(uuid())
  name          String?  
  description   String?         @db.VarChar(1000)
  serviceImages ServiceImage[]
  price         Float?

}

model ServiceReview{
  id            String              @id @default(uuid())
  rating        Int?
  profileId     String?
  profile       Profile?        @relation(fields: [profileId], references: [id])   
  description   String?         @db.VarChar(1000)

}

model ProductReview{
  id            String              @id @default(uuid())
  rating        Int?
  profileId     String?
  profile       Profile?        @relation(fields: [profileId], references: [id])   
  description   String?         @db.VarChar(1000)

}

model ProductImage {
    id          String   @id @default(uuid())
    productId   String? //foreign key
    product     Product?   @relation(fields: [productId], references: [id])
    imageUrl    String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([productId])
}

model ServiceImage {
    id          String   @id @default(uuid())
    serviceId   String? //foreign key
    service     Service?   @relation(fields: [serviceId], references: [id])
    imageUrl    String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([serviceId])
}

model Order {
    id           String       @id @default(uuid())
    profileId    String?
    profile      Profile?     @relation(fields: [profileId], references: [id])
    orderItems   OrderItem[] //Relation to OrderItem model
    isPaid       Boolean      @default(false)
    deliveryType DeliveryType @default(DELIVERY)
    discount     Float?
    phone        String?      @default("")
    address      String?      @default("")
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt

    @@index([profileId])
}

//intermediary for a many-to-many relationship
model OrderItem {
    id        String  @id @default(uuid())
    orderId   String //foreign key to order
    order     Order   @relation(fields: [orderId], references: [id])
    productId String //foreign key to product
    product   Product @relation(fields: [productId], references: [id])

    @@index([orderId])
    @@index([productId])
}


enum DeliveryType {
    PICKUP
    DELIVERY
}